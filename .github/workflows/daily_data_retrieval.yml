name: Retrieve Fresh Data from NWT Repository

on:
  workflow_dispatch:

jobs:
  replace_fresh_tables:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests boto3 snowflake-connector-python

      - name: Retrieve latest %_FRESH files and Replace %_Fresh Files (If Necessary)
        id: check_files
        run: |
          result=$(python replace_fresh_tables.py)
          echo "some-output=$result" >> $GITHUB_ENV
          echo "::set-output name=some-output::$result"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DBT_USER: ${{ secrets.DBT_USER }}
          DBT_PASSWORD: ${{ secrets.DBT_PASSWORD }}
          DBT_ACCOUNT: ${{ secrets.DBT_ACCOUNT }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}

    outputs:
      some-output: ${{ steps.check_files.outputs.some-output }}

  if_table_replaced:
    needs: replace_fresh_tables
    runs-on: ubuntu-latest
    if: ${{ needs.replace_fresh_tables.outputs.some-output == 'true' }}
    steps:
      - name: Have fresh data
        run: echo "new data from NWT Repository, commence sync using dbt run" 

  if_table_not_replaced:
    needs: replace_fresh_tables
    runs-on: ubuntu-latest
    if: ${{ needs.replace_fresh_tables.outputs.some-output == 'false' }}
    steps:
      - name: No fresh data
        run: echo "No new data from NWT Repository"

  dbt-run:
    needs: if_table_replaced
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install dbt_snowflake

      - name: Run dbt
        env:
          DBT_ACCOUNT: ${{ secrets.DBT_ACCOUNT }}
          DBT_USER: ${{ secrets.DBT_USER }}
          DBT_PASSWORD: ${{ secrets.DBT_PASSWORD }}
        run: dbt run --profiles-dir profiles

  dbt-test:
    needs: dbt-run
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install dbt_snowflake

      - name: Test dbt
        env:
          DBT_ACCOUNT: ${{ secrets.DBT_ACCOUNT }}
          DBT_USER: ${{ secrets.DBT_USER }}
          DBT_PASSWORD: ${{ secrets.DBT_PASSWORD }}
        run: dbt test --profiles-dir profiles

  Generate-Test-Documentation:
    needs: dbt-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        script-type: ['testing_raw', 'testing_intermediate']

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install snowflake-connector-python

      - name: Run testing_raw and testing_intermediate Script
        run: |
          if [ "${{ matrix.script-type }}" == "testing_raw" ]; then
            python testing_raw.py
          elif [ "${{ matrix.script-type }}" == "testing_intermediate" ]; then
            python testing_intermediate.py
          fi



